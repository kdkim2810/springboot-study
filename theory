- TDD와 단위테스트는 엄밀히 다른것

# TDD(테스트가 주도하는 개발)
    @ 레드 그린 싸이클
    - 항상 실패하는 테스트를 먼저 작성(Red)
    - 테스트가 통과하는 프로덕션 코드를 작성(Green)
    - 테스트가 통과하면 프로덕션 코드를 리팩토링(Refactor)

# 단위테스트
    - TDD의 첫번쨰 단계인 기능 단위의 테스트코드를 작성하는것을 의미
    - 단순 테스트코드만을 작성하는 것을 의미함(꼭 먼저 할필요도 없고, 리팩토링도 포함되지 않음)

    @ 장점
        - 단위 테스트는 개발단계 초기에 문제를 발견하게 도와줌
        - 단위 테스트는 개발자가 나중에 코드를 리팩토링하거나 라이브러리 업그레이드 등에서 기존 기능이 올바르게 작동하는지 확인할 수 있음 ex)회귀 테스트
        - 단위 테스트는 기능에 대한 불확실성을 감소
        - 단위 테스트는 시스템에 대한 실제 문서를 제공함. 즉, 단위 테스트 자체가 문서로 사용될 수 있음

# assertj
    @ 장점
        - CoreMatchers와 달리 추가적으로 라이브러리가 필요하지 않음
        (Junit의 assertThat을 쓰게 되면 is()와 같이 CoreMatchers 라이브러리가 필요함)
        - 자동완성이 좀 더 확실하게 지원됨
        (IDE에서는 CoreMatchers와 같은 Matcher 라이브러리의 자동완성 지원이 약함)
        - 백기선님 유튜브 참고(http://bit.ly/30vm9Lg)

# 스프링 Bean 주입 방법
    - @Autowired(지양)
    - setter
    - 생성자(권장)
        - @RequiredArgsConstructor(final이나 @NonNull로 선언된 필드만 파라미터로 받는 생성자를 생성)
        - @AllArgsConstructor(모든 필드를 파라미터로 받는 생성자를 생성)
        - @NoArgsConstructor(아무 파라미터도 받지 않는 빈 생성자를 생성)

# 스프링 시큐리티
    - 스프링 기반의 어플리케이션에선 보안을 위한 표준
    (인터셉터, 필터 기반의 보안 기능보다 스프링 시큐리티를 통해 구현하는것을 권장)
    - spring-secutiry-oauth2-autoconfigure을 사용 시 스프링부트 버전에 상관없이 이전 버전의 설정도 그대로 사용 가능

# 세션 저장소 사용방법
    - 톰캣 세션을 사용
    (일반적으로 별다른 설정을 하지 않을때 기본적으로 선택되는 방식, 2대 이상의 WAS가 구동될 경우 톰캣들 간의 세션 공유를 위한 추가 설정 필요)
    - Mysql와 같은 DBMS를 세션 저장소로 사용
    (가장 쉬운 방법이며, 많은 설정이 필요가 없지만 로그인이 요청되는 경우마다 DB IO가 발생하여 성능 이슈 생길 가능성 有, 보통 로그인 요청이 많이 없는 백오피스나 사내 시스템에서 사용)
    - Redis, Memcached와 같은 메모리 DB를 세션 저장소로 사용
    (B2C 서비스에서 가장 많이 사용되는 방식, 실제 서비스로 사용되기 위해서는 Embedded Redis와 같은 방식이 아닌 외부 메모리 서버가 필요)